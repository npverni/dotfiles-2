"= Initial setup ==================================================================================
  " use Vim settings, rather than Vi settings
  set nocompatible

  " use UTF-8 encoding for the win
  set encoding=utf8

"= Plug.vim =======================================================================================

  " A minimalist Vim plugin manager.
  " See https://github.com/junegunn/vim-plug for more information

  " initialize Plug
  call plug#begin()

  " General purpose plugins that should always be loaded ------------------------------------------

    Plug 'airblade/vim-gitgutter'           " More fancy git stuff
    " Plug 'chriskempson/base16-vim'          " Base16 color scheme for vim
    Plug 'snooc/base16-vim'                 " Fork of the above with updated themes
    Plug 'christoomey/vim-tmux-navigator'   " Navigate seamlessly between vim and tmux splits
    Plug 'ctrlpvim/ctrlp.vim'               " Fuzzy file search within current directory
    Plug 'scrooloose/syntastic'             " Check buffer for syntax errors when saving
    Plug 'tpope/vim-commentary'             " Easy code commenting
    Plug 'vim-airline/vim-airline'          " Show a nice statusline
    Plug 'vim-airline/vim-airline-themes'   " Themes for airline

  " Plugins that can be lazy-loaded ---------------------------------------------------------------

    " Create a new buffer with text in current visual block
    Plug 'chrisbra/NrrwRgn', { 'on': 'NarrowRegion' }

    " Colorize color strings, e.g. #abc
    Plug 'lilydjwg/colorizer', { 'for': ['css', 'html', 'haml', 'slim',
                                       \ 'javascript', 'sass', 'scss', 'less'] }

    " Superfast code searching
    Plug 'rking/ag.vim', { 'on': 'Ag' }

    " HTML5 syntax highlighting
    Plug 'othree/html5.vim', { 'for': ['html', 'erb', 'mustache'] }

    " Handy folder tree
    Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }

    " Slim syntax support
    Plug 'slim-template/vim-slim', { 'for': ['slim', 'haml'] }

    " Bundler highlighting and utilities
    Plug 'tpope/vim-bundler', { 'for': ['ruby'] }

    " HAML syntax and utiliites
    Plug 'tpope/vim-haml', { 'for': ['haml'] }

    " Markdown syntax highlighting
    Plug 'tpope/vim-markdown', { 'for': ['markdown', 'haml'] }

   " Rails syntax & utilities
    Plug 'tpope/vim-rails', { 'for': ['ruby'] }

    " Rake syntax & utilities
    Plug 'tpope/vim-rake', { 'for': ['ruby'] }

    " Ruby syntax highlighting and more
    Plug 'vim-ruby/vim-ruby', { 'for': ['ruby'] }

  " Plugins that depend on other plugins being present (load last) --------------------------------

    " Nerdy icons everywhere!
    Plug 'ryanoasis/vim-devicons'

  call plug#end()

"= Interface ======================================================================================

  " Appearance ------------------------------------------------------------------------------------

    syntax on                    " turn on syntax highilghting

    filetype plugin on           " enable loading plugins for filetypes
    filetype indent on           " enable loading 'indent files' for filetypes

    set cursorline               " highlight line under cursor
    set synmaxcol=200            " no syntax highlighting for lines longer than 100 cols

    set laststatus=2             " show status bar

    set number                   " display line numbers
    set visualbell               " use visual bell
    set t_ut=                    " disable background color erase

  " Interaction -----------------------------------------------------------------------------------

    set autoread                 " automatically reload unmodified buffers when edited externally

    set ttyfast                  " improve screen refresh for terminal vim

    set scrolloff=3              " start scrolling 3 lines from bottom
    set sidescrolloff=6          " start scrolling 6 lines from right
    let loaded_match_paren = 1   " highlight matching parens

    set mouse=a                  " allow mouse usage

    set clipboard=unnamed        " use the system clipboard

  " Wrapping --------------------------------------------------------------------------------------

    set nowrap                   " don't softwrap text
    set formatoptions-=t         " don't automatically hardwrap text (use 'gq' to reflow text)
    set textwidth=80             " wrap at column 80
    set wrapmargin=0             " don't wrap based on terminal size

  " Indentation -----------------------------------------------------------------------------------

    set autoindent               " indent next line to same level as current line
    set smartindent              "   ↑ but do it smartly
    set smarttab                 " <Tab> in front of a line inserts 'shiftwidth' blanks
    set shiftwidth=2             "   ↑ use 2 blanks for above
    set tabstop=2                " display a <Tab> as 2 spaces
    set softtabstop=2            " use 2 spaces for a <Tab>
    set expandtab                "   ↑ insert spaces when <Tab> key is ressed

"= Utilities ======================================================================================

  set nobackup                 " don't create backup files
  set nowb                     " don't make a backup before overwriting a file
  set directory=~/.vim/swap//  " put swap files in ~/.vim/undo/pat%to$file.ext.swp
  set undodir=~/.vim/undo//    " put undo files in ~/.vim/undo/path%to$file.ext

"= Keys ===========================================================================================

  let mapleader = ','                     " Fearless leader!
  set backspace=indent,eol,start          " Make backspace behave as expected

  " Split Navigation
  nmap <Leader>l :tabnext<CR>
  nmap <Leader>h :tabprevious<CR>

  " Folding
  nmap <Leader>F :set foldmethod=syntax<CR>

  " Transpose the line(s) under the cursor one line down
  nmap <Leader>k ddp
  " Transpose the line(s) under the cursor one line up
  nmap <Leader>K ddkP
  " Transpose character(s) under the cursor one position to the right
  nmap <Leader>x xp
  " Transpose character(s) under the cursor one position to the left
  nmap <Leader>X xhP

"= Theme ==========================================================================================

  set background=dark
  colorscheme base16-default

  set hlsearch                            " highlight all search matches
  set colorcolumn=80,100,120              " visual indicator at columns 80, 100, 120

  set list listchars=tab:██,trail:∙       " Use "██" for tabs and "∙" for trailing spaces
  set fillchars+=vert:                    " set vertical fillchar to "en space" (it's there, trust

"= File Types =====================================================================================

  au BufRead,BufNewFile *.brs setf vb           " Use VBScript for BrightScript files
  au BufRead,BufNewFile *.md  setf markdown     " Use Markdown for .md files
  au BufRead,BufNewFile *.jbuilder setf ruby    " Use Ruby for .jbuilder files

"= Airline ========================================================================================

  " Use powerline fonts for fancy icons
  let g:airline_powerline_fonts = 1

  " Use the tabline extension
  let g:airline#extensions#tabline#enabled = 1
  let g:airline#extensions#tabline#show_buffers = 0

  " Use the base16 theme using terminal colors
  let g:airline_theme='base16'

"= CtrlP ==========================================================================================

  " Use caching
  let g:ctrlp_use_caching = 1

  " Persist cache across sessions
  let g:ctrlp_clear_cache_on_exit = 0

  " Show hidden files
  let g:ctrlp_show_hidden = 1

  " Ignore specific files and folders
  let g:ctrlp_custom_ignore = {
    \ 'dir': '(log|vendor/bundle|tmp|components/\.*/(vendor/bundle|tmp|spec/dummy|log))',
    \ 'file': '\v\.(jpg|png|gif|db)'
    \ }

  " Ignore files in `.gitignore`
  let g:ctrlp_user_command = {
    \ 'types': {
      \ 1: ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard'],
      \ },
    \ 'fallback': 'find %s -type f'
    \ }

  " Keymappings -----------------------------------------------------------------------------------

    nmap <Leader>p <C-p>
    nmap <Leader>P :CtrlPClearAllCaches<CR><C-p>
    nmap <Leader>b :CtrlPBuffer<CR>

"= GitGutter ======================================================================================

  let g:gitgutter_enabled = 0
  let g:gitgutter_map_keys = 0
  let g:gitgutter_highlight_lines = 1

  " Keymappings -----------------------------------------------------------------------------------

  nmap <Leader>gg :GitGutterToggle<CR>

"= NERDTree =======================================================================================

  let NERDTreeQuitOnOpen = 1  " Hide NERDTree when opening a file
  let NERDTreeShowHidden = 1  " Show hidden files

  " Keymappings -----------------------------------------------------------------------------------

  nmap <Leader>n :NERDTreeToggle<CR>

"= Syntastic ======================================================================================

  " Pop up the location list when there is a syntax error
  let g:syntastic_always_populate_loc_list = 1
  let g:syntastic_auto_loc_list = 1

  " Don't check syntax when quitting
  let g:syntastic_check_on_wq = 0

  " Don't check syntax when opening a file
  let g:check_on_open = 0

  " Smaller location list
  let g:syntastic_loc_list_height = 5

"==================================================================================================
